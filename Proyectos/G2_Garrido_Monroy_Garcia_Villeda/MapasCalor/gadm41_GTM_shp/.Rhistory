dplyr::slice(1:10) |>
dplyr::mutate(
Rank  = dplyr::row_number(),
Medal = dplyr::case_when(
Rank == 1 ~ "ðŸ¥‡",
Rank == 2 ~ "ðŸ¥ˆ",
Rank == 3 ~ "ðŸ¥‰",
TRUE ~ paste0("#", Rank)
),
`Valor` = fmt(Valor)
) |>
dplyr::select(Medal, Departamento, `Valor`)
# tema base sencillo
tbl <- ggpubr::ggtexttable(
top10, rows = NULL,
theme = ggpubr::ttheme("classic", base_size = 12)
) +
ggplot2::labs(title = "Top 10 (mayor a menor)") +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, face = "bold", size = 12))
# encabezado azul con texto blanco
tbl <- ggpubr::table_cell_bg(tbl, row = 1, column = 1:3, fill = "#2E86C1")
tbl <- ggpubr::table_cell_font(tbl, row = 1, column = 1:3, color = "white", face = "bold")
# zebra striping y resaltar Top 3
n_rows <- nrow(top10)
for (i in seq_len(n_rows)) {
r <- i + 1
if (i %% 2 == 0) {
tbl <- ggpubr::table_cell_bg(tbl, row = r, column = 1:3, fill = "#F4F6F7")
}
}
tbl <- ggpubr::table_cell_bg(tbl, row = 2, column = 1:3, fill = "#FFF3CD")  # ðŸ¥‡
tbl <- ggpubr::table_cell_bg(tbl, row = 3, column = 1:3, fill = "#FFF9E3")  # ðŸ¥ˆ
tbl <- ggpubr::table_cell_bg(tbl, row = 4, column = 1:3, fill = "#FEFCF3")  # ðŸ¥‰
# (opcional) colorear la columna de valores por magnitud
vals_num <- suppressWarnings(readr::parse_number(top10$`Valor`))
rng <- range(vals_num, na.rm = TRUE)
pal <- scales::col_numeric(viridis::viridis(100), domain = rng)
for (i in seq_len(n_rows)) {
r <- i + 1
v <- vals_num[i]
if (!is.na(v)) {
tbl <- ggpubr::table_cell_bg(tbl, row = r, column = 3, fill = pal(v))
tbl <- ggpubr::table_cell_font(tbl, row = r, column = 3, color = "white", face = "bold")
}
}
# combinar con el mapa
p_final <- (p + theme(legend.position = "bottom")) | tbl
p_final <- p_final + patchwork::plot_layout(widths = c(2.2, 1))
# guardar archivo (8x6 pulgadas, 300 dpi)
ggsave(filename = fname, plot = p, width = 8, height = 6, dpi = 300)
message("âœ” Guardado: ", fname)
}
# â”€â”€ LibrerÃ­as
library(sf)
library(readxl)
library(dplyr)
library(tidyr)
library(stringi)
library(ggplot2)
library(viridis)
library(ggpubr)
library(patchwork)
# â”€â”€ Rutas (AJUSTA estas dos lÃ­neas a tu equipo)
path_shp  <- "C:/Users/Javie/OneDrive/Escritorio/PROGRAMACIÃ“N II/quarto presentaciÃ³n_files/gadm41_GTM_shp"
path_xlsx <- file.path(path_shp, "indicadores_acceso_tecnologico.xlsx")
# â”€â”€ Utilidades
norm <- function(x) stringi::stri_trans_general(tolower(x), "Latin-ASCII")
sanitize <- function(x) gsub("[^A-Za-z0-9_\\-]+", "_", x)
# â”€â”€ 1) Shapefile GADM nivel 1 (Departamentos)
stopifnot(dir.exists(path_shp), file.exists(path_xlsx))
gadm1 <- sf::st_read(dsn = path_shp, layer = "gadm41_GTM_1", quiet = TRUE) |>
mutate(NAME_1_norm = norm(NAME_1))
gadm1 <- gadm1 |>
mutate(
NAME_1 = ifelse(NAME_1 == "Quezaltenango", "Quetzaltenango", NAME_1),
NAME_1_norm = norm(NAME_1)  # volver a normalizar despuÃ©s del cambio
)
# â”€â”€ 2) Excel: tomar primeras 11 columnas y detectar la de cÃ³digo INE (1..22)
df_raw <- readxl::read_xlsx(path_xlsx, .name_repair = "unique")
df10   <- df_raw[, 1:11]
# Detecta automÃ¡ticamente la columna de cÃ³digos 1..22; si no, pon el nombre manual
posibles_cod <- names(df10)[sapply(df10, function(x) all(na.omit(as.integer(x)) %in% 1:22))]
cod_col <- if (length(posibles_cod) >= 1) posibles_cod[1] else "codigo_depto"
# Asegura entero y convierte textos numÃ©ricos (%, comas) a nÃºmero
df10 <- df10 |>
mutate(ine_code = as.integer(.data[[cod_col]])) |>
mutate(across(setdiff(names(df10), c(cod_col, "ine_code")), ~{
if (is.character(.x)) readr::parse_number(.x) else .x
}))
# â”€â”€ 3) Cruce INE â†’ nombre oficial de depto (para empatar con GADM)
cruce_ine <- tibble::tibble(
ine_code = 1:22,
depto_ine = c(
"Guatemala","El Progreso","SacatepÃ©quez","Chimaltenango","Escuintla",
"Santa Rosa","SololÃ¡","TotonicapÃ¡n","Quetzaltenango","SuchitepÃ©quez",
"Retalhuleu","San Marcos","Huehuetenango","QuichÃ©","Baja Verapaz",
"Alta Verapaz","PetÃ©n","Izabal","Zacapa","Chiquimula","Jalapa","Jutiapa"
)
) |>
mutate(depto_norm = norm(depto_ine))
df10_join <- df10 |> left_join(cruce_ine, by = "ine_code")
# â”€â”€ 4) Columnas/indicadores a mapear (todas menos cÃ³digo)
indic_cols <- setdiff(names(df10), c(cod_col, "ine_code"))
stopifnot(length(indic_cols) > 0)
# â”€â”€ 5) Carpeta de salida y loop: UN MAPA POR INDICADOR
out_dir <- "mapas_icl2024"
dir.create(out_dir, showWarnings = FALSE)
for (col in indic_cols) {
# datos del indicador actual
dat_i <- df10_join |>
select(ine_code, depto_ine, depto_norm, !!col)
# unir con geometrÃ­a
mapa_i <- gadm1 |>
left_join(dat_i, by = c("NAME_1_norm" = "depto_norm"))
# tÃ­tulo/etiqueta y archivo
titulo <- paste0("Indicador: ", col)
fname  <- file.path(out_dir, paste0(sanitize(col), ".png"))
# mapa
p <- ggplot(mapa_i) +
geom_sf(aes(fill = .data[[col]]), color = "white", linewidth = 0.2) +
scale_fill_viridis_c(option = "C", na.value = "grey90",
name = col, guide = guide_colorbar(title.position = "top")) +
coord_sf(datum = NA) +
labs(
title    = titulo,
subtitle = "",
caption  = "Fuente: Encuesta Nacional de Condiciones de Vida 2018"
) +
theme_void(base_size = 12) +
theme(
plot.title    = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
legend.position = "bottom",
legend.title    = element_text(face = "bold")
)
# ----- TOP-10 (tabla estilizada robusta) -----
fmt <- scales::label_number(accuracy = 0.1, big.mark = ",")
top10 <- df10_join |>
transmute(Departamento = depto_ine, Valor = .data[[col]]) |>
arrange(desc(Valor)) |>
slice_head(n = 10)
# si no hay datos numÃ©ricos, evita explotar y salta a solo mapa
if (nrow(top10) == 0 || all(is.na(top10$Valor))) {
p_final <- p
} else {
top10 <- top10 |>
mutate(
Rank  = row_number(),
Ranking = case_when(
Rank == 1 ~ "ðŸ¥‡",
Rank == 2 ~ "ðŸ¥ˆ",
Rank == 3 ~ "ðŸ¥‰",
TRUE ~ paste0("", Rank)
),
Valor = fmt(Valor)
) |>
select(Ranking, Departamento, Valor)
n_rows <- nrow(top10)
n_cols <- ncol(top10)
tbl <- ggpubr::ggtexttable(
top10, rows = NULL,
theme = ggpubr::ttheme("classic", base_size = 12)
) +
labs(title = "Top 10 (mayor a menor)") +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 12))
# --- colorear columna de "Valor" por magnitud ---
col_val <- which(colnames(top10) == "Valor")
vals_num <- suppressWarnings(readr::parse_number(top10$Valor))
rng <- range(vals_num, na.rm = TRUE)
pal <- scales::col_numeric(viridis::viridis(100), domain = rng)
for (i in seq_len(n_rows)) {
r <- i + 1  # +1 porque la fila 1 es el encabezado
v <- vals_num[i]
# VerificaciÃ³n extra para evitar errores
if (!is.na(v) &&
r <= (nrow(top10) + 1) &&                # fila vÃ¡lida
length(col_val) == 1 &&
col_val <= ncol(top10)) {                # columna vÃ¡lida
tbl <- ggpubr::table_cell_bg(tbl, row = r, column = col_val, fill = pal(v))
tbl <- ggpubr::table_cell_font(tbl, row = r, column = col_val, color = "white", face = "bold")
}
}
# zebra striping
for (i in seq_len(n_rows)) {
r <- i + 1
if (i %% 2 == 0) tbl <- ggpubr::table_cell_bg(tbl, row = r, column = 1:n_cols, fill = "#F4F6F7")
}
# resaltar top 3 si existen
if (n_rows >= 1) tbl <- ggpubr::table_cell_bg(tbl, row = 2, column = 1:n_cols, fill = "#FFF3CD")
if (n_rows >= 2) tbl <- ggpubr::table_cell_bg(tbl, row = 3, column = 1:n_cols, fill = "#FFF9E3")
if (n_rows >= 3) tbl <- ggpubr::table_cell_bg(tbl, row = 4, column = 1:n_cols, fill = "#FEFCF3")
# colorear por magnitud la columna "Valor" (ubicaciÃ³n por nombre, a prueba de cambios)
col_val <- which(colnames(top10) == "Valor")
vals_num <- suppressWarnings(readr::parse_number(top10$Valor))
rng <- range(vals_num, na.rm = TRUE)
pal <- scales::col_numeric(viridis::viridis(100), domain = rng)
for (i in seq_len(n_rows)) {
r <- i + 1
v <- vals_num[i]
if (!is.na(v) && length(col_val) == 1) {
tbl <- ggpubr::table_cell_bg(tbl,  row = r, column = col_val, fill = pal(v))
tbl <- ggpubr::table_cell_font(tbl, row = r, column = col_val, color = "white", face = "bold")
}
}
# combinar con el mapa (usar wrap_elements)
p_final <- (p + theme(legend.position = "bottom")) |
patchwork::wrap_elements(full = tbl)
p_final <- p_final + patchwork::plot_layout(widths = c(2.2, 1))
}
# â”€â”€ guardar archivo (8x6 pulgadas, 300 dpi)
ggsave(filename = fname, plot = p_final, width = 8, height = 6, dpi = 300)
message("âœ” Guardado: ", fname)
}
message("Listo. Revisa la carpeta: ", normalizePath(out_dir))
library(sf)
library(readxl)
library(dplyr)
library(tidyr)
library(stringi)
library(ggplot2)
library(viridis)
library(ggpubr)
library(patchwork)
# â”€â”€ Rutas (AJUSTA estas dos lÃ­neas a tu equipo)
path_shp  <- "C:/Users/Javie/OneDrive/Escritorio/PROGRAMACIÃ“N II/quarto presentaciÃ³n_files/gadm41_GTM_shp"
path_xlsx <- file.path(path_shp, "indicadores_acceso_tecnologico.xlsx")
# â”€â”€ Utilidades
norm <- function(x) stringi::stri_trans_general(tolower(x), "Latin-ASCII")
sanitize <- function(x) gsub("[^A-Za-z0-9_\\-]+", "_", x)
# â”€â”€ 1) Shapefile GADM nivel 1 (Departamentos)
stopifnot(dir.exists(path_shp), file.exists(path_xlsx))
gadm1 <- sf::st_read(dsn = path_shp, layer = "gadm41_GTM_1", quiet = TRUE) |>
mutate(NAME_1_norm = norm(NAME_1))
gadm1 <- gadm1 |>
mutate(
NAME_1 = ifelse(NAME_1 == "Quezaltenango", "Quetzaltenango", NAME_1),
NAME_1_norm = norm(NAME_1)  # volver a normalizar despuÃ©s del cambio
)
# â”€â”€ 2) Excel: tomar primeras 11 columnas y detectar la de cÃ³digo INE (1..22)
df_raw <- readxl::read_xlsx(path_xlsx, .name_repair = "unique")
df10   <- df_raw[, 1:11]
# Detecta automÃ¡ticamente la columna de cÃ³digos 1..22; si no, pon el nombre manual
posibles_cod <- names(df10)[sapply(df10, function(x) all(na.omit(as.integer(x)) %in% 1:22))]
cod_col <- if (length(posibles_cod) >= 1) posibles_cod[1] else "codigo_depto"
# Asegura entero y convierte textos numÃ©ricos (%, comas) a nÃºmero
df10 <- df10 |>
mutate(ine_code = as.integer(.data[[cod_col]])) |>
mutate(across(setdiff(names(df10), c(cod_col, "ine_code")), ~{
if (is.character(.x)) readr::parse_number(.x) else .x
}))
# â”€â”€ 3) Cruce INE â†’ nombre oficial de depto (para empatar con GADM)
cruce_ine <- tibble::tibble(
ine_code = 1:22,
depto_ine = c(
"Guatemala","El Progreso","SacatepÃ©quez","Chimaltenango","Escuintla",
"Santa Rosa","SololÃ¡","TotonicapÃ¡n","Quetzaltenango","SuchitepÃ©quez",
"Retalhuleu","San Marcos","Huehuetenango","QuichÃ©","Baja Verapaz",
"Alta Verapaz","PetÃ©n","Izabal","Zacapa","Chiquimula","Jalapa","Jutiapa"
)
) |>
mutate(depto_norm = norm(depto_ine))
df10_join <- df10 |> left_join(cruce_ine, by = "ine_code")
# â”€â”€ 4) Columnas/indicadores a mapear (todas menos cÃ³digo)
indic_cols <- setdiff(names(df10), c(cod_col, "ine_code"))
stopifnot(length(indic_cols) > 0)
# â”€â”€ 5) Carpeta de salida y loop: UN MAPA POR INDICADOR
out_dir <- "mapas_icl2024"
dir.create(out_dir, showWarnings = FALSE)
for (col in indic_cols) {
# datos del indicador actual
dat_i <- df10_join |>
select(ine_code, depto_ine, depto_norm, !!col)
# unir con geometrÃ­a
mapa_i <- gadm1 |>
left_join(dat_i, by = c("NAME_1_norm" = "depto_norm"))
# tÃ­tulo/etiqueta y archivo
titulo <- paste0("Indicador: ", col)
fname  <- file.path(out_dir, paste0(sanitize(col), ".png"))
# mapa
p <- ggplot(mapa_i) +
geom_sf(aes(fill = .data[[col]]), color = "white", linewidth = 0.2) +
scale_fill_viridis_c(option = "C", na.value = "grey90",
name = col, guide = guide_colorbar(title.position = "top")) +
coord_sf(datum = NA) +
labs(
title    = titulo,
subtitle = "",
caption  = "Fuente: Encuesta Nacional de Condiciones de Vida 2018"
) +
theme_void(base_size = 12) +
theme(
plot.title    = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
legend.position = "bottom",
legend.title    = element_text(face = "bold")
)
# ----- TOP-10 (tabla estilizada robusta) -----
fmt <- scales::label_number(accuracy = 0.1, big.mark = ",")
top10 <- df10_join |>
transmute(Departamento = depto_ine, Valor = .data[[col]]) |>
arrange(desc(Valor)) |>
slice_head(n = 10)
# si no hay datos numÃ©ricos, evita explotar y salta a solo mapa
if (nrow(top10) == 0 || all(is.na(top10$Valor))) {
p_final <- p
} else {
top10 <- top10 |>
mutate(
Rank  = row_number(),
Ranking = case_when(
Rank == 1 ~ "ðŸ¥‡",
Rank == 2 ~ "ðŸ¥ˆ",
Rank == 3 ~ "ðŸ¥‰",
TRUE ~ paste0("", Rank)
),
Valor = fmt(Valor)
) |>
select(Ranking, Departamento, Valor)
n_rows <- nrow(top10)
n_cols <- ncol(top10)
tbl <- ggpubr::ggtexttable(
top10, rows = NULL,
theme = ggpubr::ttheme("classic", base_size = 12)
) +
labs(title = "Top 10 (mayor a menor)") +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 12))
# --- colorear columna de "Valor" por magnitud ---
col_val <- which(colnames(top10) == "Valor")
vals_num <- suppressWarnings(readr::parse_number(top10$Valor))
rng <- range(vals_num, na.rm = TRUE)
pal <- scales::col_numeric(viridis::viridis(100), domain = rng)
for (i in seq_len(n_rows)) {
r <- i + 1  # +1 porque la fila 1 es el encabezado
v <- vals_num[i]
# VerificaciÃ³n extra para evitar errores
if (!is.na(v) &&
r <= (nrow(top10) + 1) &&                # fila vÃ¡lida
length(col_val) == 1 &&
col_val <= ncol(top10)) {                # columna vÃ¡lida
tbl <- ggpubr::table_cell_bg(tbl, row = r, column = col_val, fill = pal(v))
tbl <- ggpubr::table_cell_font(tbl, row = r, column = col_val, color = "white", face = "bold")
}
}
# zebra striping
for (i in seq_len(n_rows)) {
r <- i + 1
if (i %% 2 == 0) tbl <- ggpubr::table_cell_bg(tbl, row = r, column = 1:n_cols, fill = "#F4F6F7")
}
# resaltar top 3 si existen
if (n_rows >= 1) tbl <- ggpubr::table_cell_bg(tbl, row = 2, column = 1:n_cols, fill = "#FFF3CD")
if (n_rows >= 2) tbl <- ggpubr::table_cell_bg(tbl, row = 3, column = 1:n_cols, fill = "#FFF9E3")
if (n_rows >= 3) tbl <- ggpubr::table_cell_bg(tbl, row = 4, column = 1:n_cols, fill = "#FEFCF3")
# colorear por magnitud la columna "Valor" (ubicaciÃ³n por nombre, a prueba de cambios)
col_val <- which(colnames(top10) == "Valor")
vals_num <- suppressWarnings(readr::parse_number(top10$Valor))
rng <- range(vals_num, na.rm = TRUE)
pal <- scales::col_numeric(viridis::viridis(100), domain = rng)
for (i in seq_len(n_rows)) {
r <- i + 1
v <- vals_num[i]
if (!is.na(v) && length(col_val) == 1) {
tbl <- ggpubr::table_cell_bg(tbl,  row = r, column = col_val, fill = pal(v))
tbl <- ggpubr::table_cell_font(tbl, row = r, column = col_val, color = "white", face = "bold")
}
}
# combinar con el mapa (usar wrap_elements)
p_final <- (p + theme(legend.position = "bottom")) |
patchwork::wrap_elements(full = tbl)
p_final <- p_final + patchwork::plot_layout(widths = c(2.2, 1))
}
# â”€â”€ guardar archivo (8x6 pulgadas, 300 dpi)
ggsave(filename = fname, plot = p_final, width = 8, height = 6, dpi = 300)
message("âœ” Guardado: ", fname)
}
message("Listo. Revisa la carpeta: ", normalizePath(out_dir))
# ---- Paquetes (auto-instala si faltan) ----
pkgs <- c("shiny","leaflet","sf","dplyr","viridisLite","DT","readxl","stringi","htmltools")
miss <- pkgs[!sapply(pkgs, requireNamespace, quietly = TRUE)]
if (length(miss)) install.packages(miss, dependencies = TRUE)
invisible(lapply(pkgs, library, character.only = TRUE))
# ---- Utilidades y rutas (AJUSTA) ----
norm <- function(x) stringi::stri_trans_general(tolower(x), "Latin-ASCII")
path_shp  <- "C:/Users/Javie/OneDrive/Escritorio/PROGRAMACIÃ“N II/quarto presentaciÃ³n_files/gadm41_GTM_shp"
path_xlsx <- file.path(path_shp, "indicadores_acceso_tecnologico.xlsx")
# ---- Datos base (los mismos de tu script) ----
gadm1 <- sf::st_read(dsn = path_shp, layer = "gadm41_GTM_1", quiet = TRUE) |>
dplyr::mutate(NAME_1_norm = norm(NAME_1))
df_raw <- readxl::read_xlsx(path_xlsx, .name_repair = "unique")
df10   <- df_raw[, 1:11]
posibles_cod <- names(df10)[sapply(df10, function(x) all(na.omit(as.integer(x)) %in% 1:22))]
cod_col <- if (length(posibles_cod) >= 1) posibles_cod[1] else "codigo_depto"
df10 <- df10 |>
dplyr::mutate(ine_code = as.integer(.data[[cod_col]])) |>
dplyr::mutate(across(setdiff(names(df10), c(cod_col, "ine_code")), ~{
if (is.character(.x)) readr::parse_number(.x) else .x
}))
cruce_ine <- tibble::tibble(
ine_code = 1:22,
depto_ine = c(
"Guatemala","El Progreso","SacatepÃ©quez","Chimaltenango","Escuintla",
"Santa Rosa","SololÃ¡","TotonicapÃ¡n","Quezaltenango","SuchitepÃ©quez",
"Retalhuleu","San Marcos","Huehuetenango","QuichÃ©","Baja Verapaz",
"Alta Verapaz","PetÃ©n","Izabal","Zacapa","Chiquimula","Jalapa","Jutiapa"
)
) |> dplyr::mutate(depto_norm = norm(depto_ine))
df10_join <- df10 |> dplyr::left_join(cruce_ine, by = "ine_code")
# Solo indicadores numÃ©ricos
indic_cols <- setdiff(names(df10), c(cod_col, "ine_code"))
indic_cols <- indic_cols[sapply(df10[indic_cols], is.numeric)]
stopifnot(length(indic_cols) > 0)
# Unir todo para pintar rÃ¡pido
mapa_all <- gadm1 |> dplyr::left_join(df10_join, by = c("NAME_1_norm" = "depto_norm"))
# ---- UI ----
ui <- shiny::fluidPage(
shiny::titlePanel("Mapa interactivo de indicadores (Guatemala)"),
shiny::sidebarLayout(
shiny::sidebarPanel(
shiny::selectInput("indic", "Indicador:", choices = indic_cols),
shiny::checkboxInput("rev", "Escala inversa", value = FALSE),
shiny::sliderInput("op", "Opacidad del relleno", min = 0.2, max = 1, value = 0.85, step = 0.05)
),
shiny::mainPanel(
leaflet::leafletOutput("mapa", height = 600),
shiny::tags$hr(),
DT::DTOutput("top10")
)
)
)
# ---- SERVER ----
server <- function(input, output, session) {
# mapa base
output$mapa <- leaflet::renderLeaflet({
leaflet::leaflet(mapa_all) |>
leaflet::addProviderTiles(leaflet::providers$CartoDB.Positron) |>
leaflet::addPolylines(weight = 1, color = "#ffffff", opacity = 1)
})
# capa por indicador
shiny::observe({
req(input$indic)
col  <- input$indic
vals <- mapa_all[[col]]
pal <- leaflet::colorNumeric(
palette = viridisLite::viridis(256, option = "C", direction = ifelse(input$rev, -1, 1)),
domain = vals, na.color = "#e9ecef"
)
lab <- sprintf(
"<strong>%s</strong><br/>%s: %s",
mapa_all$NAME_1, col, ifelse(is.na(vals), "NA", format(round(vals, 3), big.mark = ","))
) |> lapply(htmltools::HTML)
leaflet::leafletProxy("mapa", data = mapa_all) |>
leaflet::clearGroup("polys") |>
leaflet::clearControls() |>
leaflet::addPolygons(
fillColor = ~pal(vals),
color = "#ffffff", weight = 1, opacity = 1,
fillOpacity = input$op,
highlightOptions = leaflet::highlightOptions(weight = 2, color = "#2c3e50", bringToFront = TRUE),
label = lab, group = "polys"
) |>
leaflet::addLegend("bottomright", pal = pal, values = vals, title = col, opacity = 0.9)
})
# Top 10 dinÃ¡mico
output$top10 <- DT::renderDT({
col <- input$indic
df10_join |>
dplyr::select(Departamento = depto_ine, Valor = dplyr::all_of(col)) |>
dplyr::arrange(dplyr::desc(Valor)) |>
dplyr::slice_head(n = min(10, sum(!is.na(Valor)))) |>
DT::datatable(options = list(pageLength = 10, dom = "t"), rownames = FALSE)
})
}
shiny::shinyApp(ui, server)
getwd()
setwd("C:/Users/Javie/OneDrive/Escritorio/PROGRAMACIÃ“N II/programa-II/Proyecto/")
# â”€â”€ Rutas (AJUSTA estas dos lÃ­neas a tu equipo)
path_shp  <- paste(getwd(), "/PresentaciÃ³n/quarto presentaciÃ³n_files/gadm41_GTM_shp", sep="")
path_xlsx <- file.path(path_shp, "indicadores_acceso_tecnologico.xlsx")
# â”€â”€ Utilidades
norm <- function(x) stringi::stri_trans_general(tolower(x), "Latin-ASCII")
sanitize <- function(x) gsub("[^A-Za-z0-9_\\-]+", "_", x)
# â”€â”€ 1) Shapefile GADM nivel 1 (Departamentos)
stopifnot(dir.exists(path_shp), file.exists(path_xlsx))
gadm1 <- sf::st_read(dsn = path_shp, layer = "gadm41_GTM_1", quiet = TRUE) |>
mutate(NAME_1_norm = norm(NAME_1))
setwd("C:/Users/Javie/OneDrive/Escritorio/PROGRAMACIÃ“N II/programa-II/Proyecto")
# â”€â”€ Rutas (AJUSTA estas dos lÃ­neas a tu equipo)
path_shp  <- paste(getwd(), "/PresentaciÃ³n/quarto presentaciÃ³n_files/gadm41_GTM_shp", sep="")
path_xlsx <- file.path(path_shp, "indicadores_acceso_tecnologico.xlsx")
norm <- function(x) stringi::stri_trans_general(tolower(x), "Latin-ASCII")
sanitize <- function(x) gsub("[^A-Za-z0-9_\\-]+", "_", x)
stopifnot(dir.exists(path_shp), file.exists(path_xlsx))
gadm1 <- sf::st_read(dsn = path_shp, layer = "gadm41_GTM_1", quiet = TRUE) |>
mutate(NAME_1_norm = norm(NAME_1))
setwd("C:\Users\Javie\OneDrive\Escritorio\PROGRAMACIÃ“N II\programa-II\Proyecto\PresentaciÃ³n\quarto presentaciÃ³n_files\gadm41_GTM_shp")
setwd("/PROGRAMACIÃ“N II/programa-II/Proyecto/PresentaciÃ³n/quarto presentaciÃ³n_files/gadm41_GTM_shp")
setwd("PROGRAMACIÃ“N II/programa-II/Proyecto/PresentaciÃ³n/quarto presentaciÃ³n_files/gadm41_GTM_shp")
setwd("C:/Users/Javie/OneDrive/Escritorio/PROGRAMACIÃ“N II/programa-II/Proyecto/PresentaciÃ³n/quarto presentaciÃ³n_files/gadm41_GTM_shp")
# â”€â”€ Rutas (AJUSTA estas dos lÃ­neas a tu equipo)
path_shp  <- paste(getwd(), "/PresentaciÃ³n/quarto presentaciÃ³n_files/gadm41_GTM_shp", sep="")
path_xlsx <- file.path(path_shp, "indicadores_acceso_tecnologico.xlsx")
# â”€â”€ Utilidades
norm <- function(x) stringi::stri_trans_general(tolower(x), "Latin-ASCII")
sanitize <- function(x) gsub("[^A-Za-z0-9_\\-]+", "_", x)
# â”€â”€ 1) Shapefile GADM nivel 1 (Departamentos)
stopifnot(dir.exists(path_shp), file.exists(path_xlsx))
path_shp  <- paste(getwd(), "/PresentaciÃ³n/quarto presentaciÃ³n_files/gadm41_GTM_shp")
path_xlsx <- file.path(path_shp, "indicadores_acceso_tecnologico.xlsx")
# â”€â”€ Utilidades
norm <- function(x) stringi::stri_trans_general(tolower(x), "Latin-ASCII")
sanitize <- function(x) gsub("[^A-Za-z0-9_\\-]+", "_", x)
# â”€â”€ 1) Shapefile GADM nivel 1 (Departamentos)
stopifnot(dir.exists(path_shp), file.exists(path_xlsx))
